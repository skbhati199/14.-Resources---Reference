version: "3.7"

networks:
  microservice-net:
    name: microservice-net
    driver: bridge

services:
  zookeeper:
    image: zookeeper:3.5
    container_name: zookeeper
    restart: unless-stopped
    networks:
      - microservice-net
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:2.12-2.4.0
    container_name: kafka
    restart: unless-stopped
    networks:
      - microservice-net
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: > 
        t.masterpayroll:1:1,
        t.masterpayroll.response:1:1,
        t.masterpayroll.DLT:1:1,
        t.outboxpolling:1:1,
        t.saga01.performancemanagement:1:1,
        t.saga01.payrollcompensation:1:1,
        t.saga01.organizationdevelopment:1:1,
        t.saga02.performancemanagement:1:1,
        t.saga02.payrollcompensation:1:1,
        t.saga02.organizationdevelopment:1:1,
        t.saga03.payrollcompensation.request:1:1,
        t.saga03.payrollcompensation.response:1:1,
        t.saga03.organizationdevelopment.request:1:1,
        t.saga03.organizationdevelopment.response:1:1,
        t.saga03.performancemanagement.request:1:1,
        t.saga04.payrollcompensation.request:1:1,
        t.saga04.payrollcompensation.response:1:1,
        t.saga04.organizationdevelopment.request:1:1,
        t.saga04.organizationdevelopment.response:1:1,
        t.saga04.performancemanagement.request:1:1,
        t.chassistwo:1:1,
        t.cqrs01.performancemanagement:1:1,
        t.cqrs01.payrollcompensation:1:1,
        t.cqrs01.organizationdevelopment:1:1
    depends_on:
      - zookeeper
  consul:
    image: consul:1.7
    container_name: consul
    restart: unless-stopped
    networks:
      - microservice-net
    ports:
      - "8400:8400"
      - "8500:8500"
      - "8600:8600"
      - "8600:8600/udp"
  mysql:
    image: mysql:8
    container_name: mysql
    restart: unless-stopped
    networks:
      - microservice-net
    ports:
     - "3306:3306"
    environment:
     MYSQL_ROOT_PASSWORD: rootpassword
    volumes:
      - ./mysql/config:/etc/mysql/conf.d
      - ./mysql/init:/docker-entrypoint-initdb.d/:ro
  kafka-connect:
    image: debezium/connect:1.0
    container_name: kafka-connect
    restart: unless-stopped
    networks:
      - microservice-net
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: "kafka:29092"
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: ms_connect_configs
      OFFSET_STORAGE_TOPIC: ms_connect_offsets
      STATUS_STORAGE_TOPIC: ms_connect_statuses
    depends_on:
     - kafka
     - mysql
  zipkin:
    image: openzipkin/zipkin:2
    container_name: zipkin
    restart: unless-stopped
    networks:
      - microservice-net
    ports:
      - "9411:9411"